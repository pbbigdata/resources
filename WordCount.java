package npu.edu.hadoop;

import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class WordCount 		
{												//input and output key/values pair to/from mapper to short/shuffle (ref:MR chart)
												//file offset, single line, word, count as 1(one)	
	public static class TokenizerMapper	extends Mapper<Object, Text, 		Text, IntWritable>
	//Each output pair would contain the word as the key and
	//the number of instances of that word in the line as the value.
	{
		private final static IntWritable one = new IntWritable(1);
		private Text word = new Text();
		
					   //input key, 	value,	output collector
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException
		//key : offset - document name
		//Text: document contents
		/*Note: The Map function is also a good place to filter any unwanted fields/ data from input file, we
				take the data only we are interested to remove unnecessary workload. */
		{
			StringTokenizer itr = new StringTokenizer(value.toString()); //document splits into words
			while (itr.hasMoreTokens()) 
			{
				//counting each word
				word.set(itr.nextToken()); 
				//adding each word as 1 to context collection example hello(key) 1(value), how 1, are 1, you 1, hello 1
				context.write(word, one); 
			}
		}
	}
	
	/*Reducer has 3 primary phases: shuffle, sort and reduce. Each reduce function processes the intermediate values for 
	 a particular key generated by the map function. There exists a one-one mapping between keys and reducers.
	 Multiple reducers run in parallel, as they are independent of one another. The number of reducers for a job is 
	 decided by the programmer. By default, the number of reducers is 1. The output of the reduce task is typically 
	 written to the FileSystem via OutputCollector.collect(WritableComparable, Writable) */
									//mapper input:   key	value	//reducer output:key, 	value
	public static class IntSumReducer extends Reducer<Text, IntWritable, 			 Text, 	IntWritable> 
	{
		private IntWritable result = new IntWritable();
		
		/*reduce method (after short and shuffle phase) accepts the Key Value "pairs" from mappers, 
		do the aggregation based on keys and produce the final output. */
		public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException
		{
			//key : a word
			//values (Iterable): a list of aggregated partial counts 
			int sum = 0;
			/*iterates through all the values available with a key and add them together and give the
            final result as the key and sum of its values*/
			for (IntWritable val : values)
			{
				sum += val.get(); //example hello, 2
			}
			
			result.set(sum);
			context.write(key, result); //output collector
		}
	}
	
	//to define the mapper/reducer class
	public static void main(String[] args) throws Exception 
	{
		Configuration conf = new Configuration();
		String[] otherArgs = new GenericOptionsParser(conf,	args).getRemainingArgs();
		
		if (otherArgs.length != 2) 
		{
			System.err.println("Usage: WordCount <in> <out>");
			System.exit(2);
		}
		
		Job job = new Job(conf, "word count");
		job.setJarByClass(WordCount.class);
		
		job.setMapperClass(TokenizerMapper.class);
		job.setCombinerClass(IntSumReducer.class);
		job.setReducerClass(IntSumReducer.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
		FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
		
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}
}